note
	description: "Input Handler"
	author: ""
	date: "$Date$"
	revision: "$Revision$"

deferred class
	INPUT_HANDLER_INTERFACE
inherit
	TYPE_CONSTRAINTS

feature {NONE}

	make_without_running(input: STRING; a_commands: ABSTRACT_UI_INTERFACE)
			-- convert an input string into array of commands
	  	do
	  		create on_error
		  	input_string := input
		  	abstract_ui  := a_commands
	  	end

	make(input: STRING; a_commands: ABSTRACT_UI_INTERFACE)
			-- convert an input string into array of commands
	  	do
	  		make_without_running(input, a_commands)
			parse_and_validate_input_string
	  	end

feature -- auxiliary queries

	evt_out (evt: TUPLE[name: STRING; args: ARRAY[EVT_ARG]]): STRING
		local
			i: INTEGER
			name: STRING
			args: ARRAY[EVT_ARG]
		do
			name := evt.name
			args := evt.args
			create Result.make_empty
			Result.append (name + "(")
			from
				i := args.lower
			until
				i > args.upper
			loop
				if args[i].src_out.is_empty then
					Result.append (args[i].out)
				else
					Result.append (args[i].src_out)
				end
				if i < args.upper then
					Result.append (", ")
				end
				i := i + 1
			end
			Result.append (")")
		end

feature -- attributes

	error: BOOLEAN

	input_string: STRING -- list of commands to execute

	abstract_ui: ABSTRACT_UI_INTERFACE
		-- output generated by `parse_string'

feature -- error reporting

	on_error: EVENT [TUPLE[STRING]]

feature -- error messages

	input_cmds_syntax_err_msg : STRING =
		"Syntax Error: specification of command executions cannot be parsed"

	input_cmds_type_err_msg : STRING =
		"Type Error: specification of command executions is not type-correct"

feature -- parsing

	parse_and_validate_input_string
	  local
		trace_parser : EVT_TRACE_PARSER
		cmd : COMMAND_INTERFACE
		invalid_cmds: STRING
	  do
		create trace_parser.make (enum_items)
		trace_parser.parse_string (input_string)

	    if NOT trace_parser.syntax_error then
	  	  invalid_cmds := find_invalid_evt_trace (
		    	trace_parser.event_trace)
		  if invalid_cmds.is_empty then
		    across trace_parser.event_trace
		    as evt
		    loop
		      cmd := evt_to_cmd (evt.item)
		      abstract_ui.put (cmd)
		    end
		  else
		    error := TRUE
		    on_error.notify (
		  	  input_cmds_type_err_msg + "%N" + invalid_cmds)
		  end
	    else
	      error := TRUE
	      on_error.notify (
		    input_cmds_syntax_err_msg + "%N At token " + trace_parser.last_error)
	    end
	end

	evt_to_cmd (evt : TUPLE[name: STRING; args: ARRAY[EVT_ARG]]) : COMMAND_INTERFACE
		local
			cmd_name : STRING
			args : ARRAY[EVT_ARG]
			dummy_cmd : DUMMY
		do
			cmd_name := evt.name
			args := evt.args
			create dummy_cmd.make("dummy", [], abstract_ui)

			if cmd_name ~ "nothing" then 
				 if TRUE then 
					 create {NOTHING} Result.make ("nothing", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_type" then 
				 if attached {STR_ARG} args[1] as product_id and then TRUE then 
					 create {ADD_TYPE} Result.make ("add_type", [product_id.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_product" then 
				 if attached {STR_ARG} args[1] as a_product and then TRUE and then attached {INT_ARG} args[2] as quantity and then TRUE then 
					 create {ADD_PRODUCT} Result.make ("add_product", [a_product.value , quantity.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_order" then 
				 if (attached {ARRAY_ARG} args[1] as a_order and then across a_order.value as member all attached {TUPLE_ARG} member.item as tup  and then tup.value.count = 2 and then (attached {STR_ARG} tup.value[1] as tup_pid) and then (attached {INT_ARG} tup.value[2] as tup_no) and then TRUE and then TRUE end) then 
					 create {ADD_ORDER} Result.make ("add_order", [a_order.to_string_integer_tuple_array], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "invoice" then 
				 if attached {INT_ARG} args[1] as order_id and then TRUE then 
					 create {INVOICE} Result.make ("invoice", [order_id.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "cancel_order" then 
				 if attached {INT_ARG} args[1] as order_id and then TRUE then 
					 create {CANCEL_ORDER} Result.make ("cancel_order", [order_id.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 
			else 
				 Result := dummy_cmd 
			end 
		end

	find_invalid_evt_trace (
		event_trace: ARRAY[TUPLE[name: STRING; args: ARRAY[EVT_ARG]]])
	: STRING
	local
		loop_counter: INTEGER
		evt: TUPLE[name: STRING; args: ARRAY[EVT_ARG]]
		cmd_name: STRING
		args: ARRAY[EVT_ARG]
		evt_out_str: STRING
	do
		create Result.make_empty
		from
			loop_counter := event_trace.lower
		until
			loop_counter > event_trace.upper
		loop
			evt := event_trace[loop_counter]
			evt_out_str := evt_out (evt)

			cmd_name := evt.name
			args := evt.args

			if cmd_name ~ "nothing" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"nothing")
				end

			elseif cmd_name ~ "add_type" then 
				if NOT( ( args.count = 1 ) AND THEN attached {STR_ARG} args[1] as product_id and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_type(product_id: STRING)")
				end

			elseif cmd_name ~ "add_product" then 
				if NOT( ( args.count = 2 ) AND THEN attached {STR_ARG} args[1] as a_product and then TRUE and then attached {INT_ARG} args[2] as quantity and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_product(a_product: STRING ; quantity: INTEGER)")
				end

			elseif cmd_name ~ "add_order" then 
				if NOT( ( args.count = 1 ) AND THEN (attached {ARRAY_ARG} args[1] as a_order and then across a_order.value as member all attached {TUPLE_ARG} member.item as tup  and then tup.value.count = 2 and then (attached {STR_ARG} tup.value[1] as tup_pid) and then (attached {INT_ARG} tup.value[2] as tup_no) and then TRUE and then TRUE end)) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_order(a_order: ARRAY[TUPLE[pid: STRING; no: INTEGER]])")
				end

			elseif cmd_name ~ "invoice" then 
				if NOT( ( args.count = 1 ) AND THEN attached {INT_ARG} args[1] as order_id and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"invoice(order_id: INTEGER)")
				end

			elseif cmd_name ~ "cancel_order" then 
				if NOT( ( args.count = 1 ) AND THEN attached {INT_ARG} args[1] as order_id and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"cancel_order(order_id: INTEGER)")
				end
			else
				if NOT Result.is_empty then
					Result.append ("%N")
				end
				Result.append ("Error: unknown event name " + cmd_name)
			end
			loop_counter := loop_counter + 1
		end
	end
end